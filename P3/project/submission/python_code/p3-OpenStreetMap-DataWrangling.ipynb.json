{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "mapparser.py\n",
    "\"\"\"\n",
    "import xml.etree.cElementTree as ET\n",
    "import pprint\n",
    "\n",
    "# count tags in the element tree\n",
    "def count_tags(filename):\n",
    "    d = {}\n",
    "    for event, elem in ET.iterparse(filename):\n",
    "        if elem.tag in d:\n",
    "            d[elem.tag] += 1\n",
    "        else:\n",
    "            d[elem.tag] = 1\n",
    "            \n",
    "    return d\n",
    "\n",
    "\n",
    "def test():\n",
    "    osm_file = open(\"/Users/jpowell/Downloads/data/miami_florida.osm\", \"r\")\n",
    "\n",
    "    tags = count_tags(osm_file)\n",
    "    pprint.pprint(tags)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    test()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "tags.py\n",
    "\"\"\"\n",
    "\n",
    "import xml.etree.cElementTree as ET\n",
    "import pprint\n",
    "import re\n",
    "\n",
    "# regex to identify formats to clean up\n",
    "lower = re.compile(r'^([a-z]|_)*$')\n",
    "lower_colon = re.compile(r'^([a-z]|_)*:([a-z]|_)*$')\n",
    "upper = re.compile(r'^([A-Z]|_)*$')\n",
    "upper_colon = re.compile(r'^([A-Z]|_)*:([A-Z]|_)*$')\n",
    "lower_upper_colon = re.compile(r'^([a-z]|_)*:([A-Z]|_)*$')\n",
    "\n",
    "problemchars = re.compile(r'[=\\+/&<>;\\'\"\\?%#$@\\,\\. \\t\\r\\n]')\n",
    "\n",
    "# count key types\n",
    "def key_type(element, keys):\n",
    "    if element.tag == \"tag\":\n",
    "        for tag in element.iter(\"tag\"):\n",
    "            value = tag.attrib['k'] \n",
    "            if lower.search(value):\n",
    "                keys['lower'] += 1\n",
    "#                 print 'lower'\n",
    "#                 print value\n",
    "            elif lower_colon.search(value):\n",
    "                keys['lower_colon'] += 1\n",
    "#                 print 'lower_colon'\n",
    "#                 print value\n",
    "            elif upper.search(value):\n",
    "                keys['upper'] += 1\n",
    "#                 print 'lower'\n",
    "#                 print value\n",
    "            elif upper_colon.search(value):\n",
    "                keys['upper_colon'] += 1\n",
    "#                 print 'lower_colon'\n",
    "#                 print value\n",
    "            elif lower_upper_colon.search(value):\n",
    "                keys['lower_upper_colon'] += 1\n",
    "#                 print 'lower_colon'\n",
    "#                 print value\n",
    "            elif problemchars.search(value):\n",
    "                keys['problemchars'] += 1\n",
    "                print 'problemchars'\n",
    "                print value\n",
    "            else:\n",
    "                keys['other'] += 1\n",
    "#                 print 'other'\n",
    "#                 print value\n",
    "\n",
    "    return keys\n",
    "\n",
    "# count tag attributes\n",
    "def count_tags(element, dictionary):\n",
    "    if element.tag == \"tag\":\n",
    "        for tag in element.iter(\"tag\"):\n",
    "            value = tag.attrib[\"k\"]\n",
    "            # print elem.tag\n",
    "            if value in dictionary:\n",
    "                dictionary[value] += 1\n",
    "            else:\n",
    "                dictionary[value] = 1\n",
    "        # print pprint.pprint(d)\n",
    "    return dictionary\n",
    "\n",
    "\n",
    "# create dictionary of formatting issues\n",
    "def process_map(filename):\n",
    "    d = {}\n",
    "    keys = {\"lower\": 0, \"lower_colon\": 0, \"upper\": 0, \"upper_colon\": 0, \"lower_upper_colon\": 0, \"problemchars\": 0, \"other\": 0}\n",
    "    for _, element in ET.iterparse(filename):\n",
    "        keys = key_type(element, keys)\n",
    "        d = count_tags(element, d)\n",
    "\n",
    "    return keys, d\n",
    "\n",
    "\n",
    "def test():\n",
    "    osm_file = open(\"/Users/jpowell/Downloads/data/miami_florida.osm\", \"r\")\n",
    "\n",
    "    keys = process_map(osm_file)\n",
    "    pprint.pprint(keys)\n",
    "    \n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    test()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "users.py\n",
    "\"\"\"\n",
    "\n",
    "import xml.etree.cElementTree as ET\n",
    "import pprint\n",
    "import re\n",
    "\n",
    "# get user attribute\n",
    "def get_user(element):\n",
    "\tif 'uid' in element.attrib.keys():\n",
    "\t\tuser = element.attrib['uid']\n",
    "\n",
    "\t\treturn user\n",
    "\n",
    "# build dictionary of unique user ids\n",
    "def process_map(filename):\n",
    "    users = set()\n",
    "    user_list = []\n",
    "    for _, element in ET.iterparse(filename):\n",
    "\t  \tif 'uid' in element.attrib.keys():\n",
    "\t\t\tuser = element.attrib['uid']\n",
    "  \t\t\tuser_list.append(user)\n",
    "\n",
    "    users = set(user_list)\n",
    "    return users\n",
    "\n",
    "\n",
    "def test():\n",
    "    osm_file = open(\"/Users/jpowell/Downloads/data/miami_florida.osm\", \"r\")\n",
    "\n",
    "    users = process_map(osm_file)\n",
    "    print len(users)\n",
    "    pprint.pprint(users)\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    test()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "audit.py\n",
    "\"\"\"\n",
    "import xml.etree.cElementTree as ET\n",
    "from collections import defaultdict\n",
    "import re\n",
    "import pprint\n",
    "\n",
    "# regex to identify text to clean up\n",
    "# parse off last string in the address\n",
    "street_type_re = re.compile(r'\\b\\S+\\.?$', re.IGNORECASE)\n",
    "# parse off first string in the address\n",
    "street_direction_re = re.compile(r'^\\w+', re.IGNORECASE)\n",
    "\n",
    "# list of expected streets \n",
    "expected = [\"Street\", \"Avenue\", \"Boulevard\", \"Drive\", \"Court\", \"Place\", \"Square\", \"Lane\", \"Road\",\n",
    "            \"Trail\", \"Parkway\", \"Commons\", \"Circle\", \"Crescent\", \"Highway\", \"Manor\", \"Terrace\",\n",
    "            \"Trace\", \"Way\", \"Causeway\", \"Point\", \"State Road\"]\n",
    "# list of expeted directions in street names. Miami is on a grid system. \n",
    "expected_direction = [\"North\", \"South\", \"East\", \"West\", \"Northeast\", \"Northwest\", \"Southeast\", \"Southwest\"]\n",
    "\n",
    "# mapping dictionaries for cleaning up street names\n",
    "# UPDATE THIS VARIABLE\n",
    "mapping = { \"AVE\": \"Avenue\",\n",
    "            \"Ave\": \"Avenue\",\n",
    "            \"Ave.\": \"Avenue\",\n",
    "            \"ave\": \"Avenue\",\n",
    "            \"BLVD\": \"Boulevard\",\n",
    "            \"Blvd\": \"Boulevard\",\n",
    "            \"Blvd.\": \"Boulevard\",\n",
    "            \"Cir\": \"Circle\",\n",
    "            \"Cirlce\": \"Circle\",\n",
    "            \"Cres\": \"Crescent\",\n",
    "            \"Ct\": \"Court\",\n",
    "            \"Dr\": \"Drive\",\n",
    "            \"Druve\": \"Drive\",\n",
    "            \"HWY\": \"Highway\",\n",
    "            \"Hwy\": \"Highway\",\n",
    "            \"Ln\": \"Lane\",\n",
    "            \"Mnr\": \"Manor\",\n",
    "            \"Pkwy\": \"Parkway\",\n",
    "            \"Pl\": \"Place\",\n",
    "            \"Pt\": \"Point\",\n",
    "            \"ST\": \"Street\",\n",
    "            \"st\": \"Street\",\n",
    "            \"St\": \"Street\",\n",
    "            \"Sr\": \"State Road\",\n",
    "            \"street\": \"Street\",\n",
    "            \"St.\": \"Street\",\n",
    "            \"RD\": \"Road\",\n",
    "            \"Rd\": \"Road\",\n",
    "            \"Rd.\": \"Road\",\n",
    "            \"Ter\": \"Terrace\",\n",
    "            \"Trce\": \"Trace\",\n",
    "            \"Trl\": \"Trail\", \n",
    "            \"NW\": \"Northwest\",\n",
    "            \"Cv\": \"Cove\",\n",
    "            \"Hwy-1\": \"US Highway 1\",\n",
    "            \"Ste\": \"Suite\",\n",
    "            \"Spgs\" : \"\"\n",
    "            }\n",
    "\n",
    "mapping_direction = {\n",
    "            \"N\": \"North\",\n",
    "            \"S\": \"South\",\n",
    "            \"E\": \"East\",\n",
    "            \"W\": \"West\",\n",
    "            \"NE\": \"Northeast\",\n",
    "            \"Norhwest\": \"Northwest\",\n",
    "            \"NW\": \"Northwest\",\n",
    "            \"SE\": \"Southeast\",\n",
    "            \"SW\": \"Southwest\",\n",
    "            \"sw\": \"Southwest\",\n",
    "            \"southwest\": \"Southwest\", \n",
    "            \"St\": \"Saint\",\n",
    "            \"Hwy\": \"Highway\", \n",
    "            \"royal\": \"Royal\",\n",
    "            \"wellington\": \"Wellington\"\n",
    "}\n",
    "\n",
    "\n",
    "# identify street types not on expected list\n",
    "def audit_street_type(street_types, street_name):\n",
    "    m = street_type_re.search(update_name(street_name, mapping))\n",
    "    if m:\n",
    "        street_type = m.group()\n",
    "        if street_type not in expected:\n",
    "            street_types[street_type].add(street_name)\n",
    "\n",
    "            \n",
    "# identify street directions not on expected list\n",
    "def audit_street_direction(street_directions, street_name):\n",
    "    m = street_direction_re.search(update_name(street_name, mapping_direction))\n",
    "    if m:\n",
    "        street_direction = m.group()\n",
    "        if street_direction not in expected_direction:\n",
    "            street_directions[street_direction].add(street_name)\n",
    "\n",
    "# identify attributes to audity\n",
    "def is_street_name(elem):\n",
    "    return (elem.attrib['k'] == \"addr:street\")\n",
    "\n",
    "\n",
    "def is_zip_code(elem):\n",
    "    return (elem.attrib['k'] == \"addr:postcode\")\n",
    "\n",
    "\n",
    "def is_state(elem):\n",
    "    return (elem.attrib['k'] == \"addr:state\")\n",
    "\n",
    "\n",
    "def is_house_no(elem):\n",
    "    return (elem.attrib['k'] == \"addr:housenumber\")\n",
    "\n",
    "\n",
    "def is_city(elem):\n",
    "    return (elem.attrib['k'] == \"addr:city\")\n",
    "\n",
    "\n",
    "# build dictionary of street types to audit\n",
    "def audit_type(osmfile):\n",
    "    osm_file = osmfile\n",
    "    street_types = defaultdict(set)\n",
    "    for event, elem in ET.iterparse(osm_file, events=(\"start\",)):\n",
    "        if elem.tag == \"node\" or elem.tag == \"way\":\n",
    "            for tag in elem.iter(\"tag\"):\n",
    "                if is_street_name(tag):\n",
    "                    audit_street_type(street_types, tag.attrib['v'])\n",
    "\n",
    "    return street_types\n",
    "\n",
    "# build dictionary of street directions to audit\n",
    "def audit_direction(osmfile):\n",
    "    osm_file = osmfile\n",
    "    street_directions = defaultdict(set)\n",
    "    for event, elem in ET.iterparse(osm_file, events=(\"start\",)):\n",
    "        if elem.tag == \"node\" or elem.tag == \"way\":\n",
    "            for tag in elem.iter(\"tag\"):\n",
    "                if is_street_name(tag):\n",
    "                    audit_street_direction(street_directions, tag.attrib['v'])\n",
    "                if is_zip_code(tag):                  \n",
    "                    zip_code = re.sub(r\"\\D\", \"\", tag.attrib['v'])\n",
    "#                     print zip_code[0:5]\n",
    "#                 if is_state(tag):\n",
    "#                     print tag.attrib['v']\n",
    "#                 if is_city(tag):\n",
    "#                     print tag.attrib['v']\n",
    "                if is_house_no(tag):\n",
    "                    print tag.attrib['v']\n",
    "\n",
    "    return street_directions\n",
    "\n",
    "\n",
    "# when string matches item in mapping dictionary replace key with value\n",
    "def update_name(name, mapping):\n",
    "    m = street_type_re.search(name)\n",
    "    if m:\n",
    "        street_type = m.group()\n",
    "        if street_type in mapping:\n",
    "            name = name.replace(street_type, mapping[street_type])\n",
    "\n",
    "    a = street_direction_re.search(name)\n",
    "    if a: \n",
    "        street_direction = a.group()\n",
    "        if street_direction in mapping:\n",
    "            name = name.replace(street_direction, mapping[street_direction])\n",
    "            \n",
    "    return name\n",
    "\n",
    "\n",
    "def test():\n",
    "    osmfile = open(\"/Users/jpowell/Downloads/data/miami_florida_sample.osm\", \"r\")\n",
    "    \n",
    "#     st_types = audit_type(osmfile)\n",
    "#     print len(st_types)\n",
    "#     pprint.pprint(dict(st_types))\n",
    "\n",
    "\n",
    "    st_directions = audit_direction(osmfile)\n",
    "    print len(st_directions)\n",
    "#     pprint.pprint(dict(st_directions))\n",
    "    \n",
    "    \n",
    "#     for st_type, ways in st_types.iteritems():\n",
    "#         for name in ways:\n",
    "#             better_name = update_name(name, mapping)\n",
    "#             print name, \"=>\", better_name\n",
    "\n",
    "#     for st_direction, ways in st_directions.iteritems():\n",
    "#         for name in ways:\n",
    "#             print name\n",
    "#             better_name = update_name(name, mapping_direction)\n",
    "#             print better_name\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    test()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Your task is to wrangle the data and transform the shape of the data\n",
    "into the model we mentioned earlier. The output should be a list of dictionaries\n",
    "that look like this:\n",
    "\n",
    "{\n",
    "\"id\": \"2406124091\",\n",
    "\"type: \"node\",\n",
    "\"visible\":\"true\",\n",
    "\"created\": {\n",
    "          \"version\":\"2\",\n",
    "          \"changeset\":\"17206049\",\n",
    "          \"timestamp\":\"2013-08-03T16:43:42Z\",\n",
    "          \"user\":\"linuxUser16\",\n",
    "          \"uid\":\"1219059\"\n",
    "        },\n",
    "\"pos\": [41.9757030, -87.6921867],\n",
    "\"address\": {\n",
    "          \"housenumber\": \"5157\",\n",
    "          \"postcode\": \"60625\",\n",
    "          \"street\": \"North Lincoln Ave\"\n",
    "        },\n",
    "\"amenity\": \"restaurant\",\n",
    "\"cuisine\": \"mexican\",\n",
    "\"name\": \"La Cabana De Don Luis\",\n",
    "\"phone\": \"1 (773)-271-5176\"\n",
    "}\n",
    "\n",
    "You have to complete the function 'shape_element'.\n",
    "We have provided a function that will parse the map file, and call the function with the element\n",
    "as an argument. You should return a dictionary, containing the shaped data for that element.\n",
    "We have also provided a way to save the data in a file, so that you could use\n",
    "mongoimport later on to import the shaped data into MongoDB.\n",
    "\n",
    "Note that in this exercise we do not use the 'update street name' procedures\n",
    "you worked on in the previous exercise. If you are using this code in your final\n",
    "project, you are strongly encouraged to use the code from previous exercise to\n",
    "update the street names before you save them to JSON.\n",
    "\n",
    "In particular the following things should be done:\n",
    "- you should process only 2 types of top level tags: \"node\" and \"way\"\n",
    "- all attributes of \"node\" and \"way\" should be turned into regular key/value pairs, except:\n",
    "    - attributes in the CREATED array should be added under a key \"created\"\n",
    "    - attributes for latitude and longitude should be added to a \"pos\" array,\n",
    "      for use in geospacial indexing. Make sure the values inside \"pos\" array are floats\n",
    "      and not strings.\n",
    "- if second level tag \"k\" value contains problematic characters, it should be ignored\n",
    "- if second level tag \"k\" value starts with \"addr:\", it should be added to a dictionary \"address\"\n",
    "- if second level tag \"k\" value does not start with \"addr:\", but contains \":\", you can process it\n",
    "  same as any other tag.\n",
    "- if there is a second \":\" that separates the type/direction of a street,\n",
    "  the tag should be ignored, for example:\n",
    "\n",
    "<tag k=\"addr:housenumber\" v=\"5158\"/>\n",
    "<tag k=\"addr:street\" v=\"North Lincoln Avenue\"/>\n",
    "<tag k=\"addr:street:name\" v=\"Lincoln\"/>\n",
    "<tag k=\"addr:street:prefix\" v=\"North\"/>\n",
    "<tag k=\"addr:street:type\" v=\"Avenue\"/>\n",
    "<tag k=\"amenity\" v=\"pharmacy\"/>\n",
    "\n",
    "  should be turned into:\n",
    "\n",
    "{...\n",
    "\"address\": {\n",
    "    \"housenumber\": 5158,\n",
    "    \"street\": \"North Lincoln Avenue\"\n",
    "}\n",
    "\"amenity\": \"pharmacy\",\n",
    "...\n",
    "}\n",
    "\n",
    "- for \"way\" specifically:\n",
    "\n",
    "  <nd ref=\"305896090\"/>\n",
    "  <nd ref=\"1719825889\"/>\n",
    "\n",
    "should be turned into\n",
    "\"node_refs\": [\"305896090\", \"1719825889\"]\n",
    "\"\"\"\n",
    "\n",
    "import xml.etree.cElementTree as ET\n",
    "import pprint\n",
    "import re\n",
    "import codecs\n",
    "import json\n",
    "from collections import defaultdict\n",
    "import phonenumbers\n",
    "\n",
    "# regex to identify formats to act on / clean up\n",
    "lower = re.compile(r'^([a-z]|_)*$')\n",
    "lower_colon = re.compile(r'^([a-z]|_)*:([a-z]|_)*$')\n",
    "problemchars = re.compile(r'[=\\+/&<>;\\'\"\\?%#$@\\,\\. \\t\\r\\n]')\n",
    "street_type_re = re.compile(r'\\b\\S+\\.?$', re.IGNORECASE)\n",
    "street_direction_re = re.compile(r'^\\w+', re.IGNORECASE)\n",
    "\n",
    "# list of keys related to creation of the object\n",
    "CREATED = [\"version\", \"changeset\", \"timestamp\", \"user\", \"uid\"]\n",
    "\n",
    "# dictionary of values to update\n",
    "MAPPING = { \"AVE\": \"Avenue\",\n",
    "            \"Ave\": \"Avenue\",\n",
    "            \"Ave.\": \"Avenue\",\n",
    "            \"ave\": \"Avenue\",\n",
    "            \"BLVD\": \"Boulevard\",\n",
    "            \"Blvd\": \"Boulevard\",\n",
    "            \"Blvd.\": \"Boulevard\",\n",
    "            \"Cir\": \"Circle\",\n",
    "            \"Cirlce\": \"Circle\",\n",
    "            \"Cres\": \"Crescent\",\n",
    "            \"Ct\": \"Court\",\n",
    "            \"Dr\": \"Drive\",\n",
    "            \"Druve\": \"Drive\",\n",
    "            \"HWY\": \"Highway\",\n",
    "            \"Hwy\": \"Highway\",\n",
    "            \"Ln\": \"Lane\",\n",
    "            \"Mnr\": \"Manor\",\n",
    "            \"Pkwy\": \"Parkway\",\n",
    "            \"Pl\": \"Place\",\n",
    "            \"Pt\": \"Point\",\n",
    "            \"ST\": \"Street\",\n",
    "            \"st\": \"Street\",\n",
    "            \"St\": \"Street\",\n",
    "            \"Sr\": \"State Road\",\n",
    "            \"street\": \"Street\",\n",
    "            \"St.\": \"Street\",\n",
    "            \"RD\": \"Road\",\n",
    "            \"Rd\": \"Road\",\n",
    "            \"Rd.\": \"Road\",\n",
    "            \"Ter\": \"Terrace\",\n",
    "            \"Trce\": \"Trace\",\n",
    "            \"Trl\": \"Trail\", \n",
    "            \"NW\": \"Northwest\",\n",
    "            \"Cv\": \"Cove\",\n",
    "            \"Hwy-1\": \"US Highway 1\",\n",
    "            \"Ste\": \"Suite\",\n",
    "            \"Spgs\" : \"\"\n",
    "            }\n",
    "\n",
    "MAPPING_DIRECTION = {\n",
    "            \"N\": \"North\",\n",
    "            \"S\": \"South\",\n",
    "            \"E\": \"East\",\n",
    "            \"W\": \"West\",\n",
    "            \"NE\": \"Northeast\",\n",
    "            \"Norhwest\": \"Northwest\",\n",
    "            \"NW\": \"Northwest\",\n",
    "            \"SE\": \"Southeast\",\n",
    "            \"SW\": \"Southwest\",\n",
    "            \"sw\": \"Southwest\",\n",
    "            \"southwest\": \"Southwest\", \n",
    "            \"St\": \"Saint\",\n",
    "            \"Hwy\": \"Highway\", \n",
    "            \"royal\": \"Royal\",\n",
    "            \"wellington\": \"Wellington\"\n",
    "}\n",
    "\n",
    "\n",
    "# update street name with dictionary\n",
    "def update_name(name, mapping):\n",
    "    m = street_type_re.search(name)\n",
    "    if m:\n",
    "        street_type = m.group()\n",
    "        if street_type in mapping:\n",
    "            name = name.replace(street_type, mapping[street_type])\n",
    "\n",
    "    a = street_direction_re.search(name)\n",
    "    if a: \n",
    "        street_direction = a.group()\n",
    "        if street_direction in mapping:\n",
    "            name = name.replace(street_direction, mapping[street_direction])\n",
    " \n",
    "    return name\n",
    "\n",
    "\n",
    "# create the element for import into MongoDB\n",
    "def shape_element(element):\n",
    "    node = {\"created\": {}, \"type\": 'node', \"address\": {}, \"node_refs\": [], \n",
    "            \"tiger\": defaultdict(), \"gnis\": defaultdict(), \n",
    "            \"source\": {\"oneway\": defaultdict(), \"hgv\": defaultdict()}}\n",
    "    if element.tag == \"node\" or element.tag == \"way\":\n",
    "        node[\"type\"] = element.tag\n",
    "        for key in element.attrib.keys():\n",
    "            if key in CREATED:\n",
    "                node[\"created\"][key] = element.attrib[key]\n",
    "            elif key == \"lat\" or key == \"lon\":\n",
    "                node[\"pos\"] = []\n",
    "                lat = float(element.attrib[\"lat\"])\n",
    "                lon = float(element.attrib[\"lon\"])\n",
    "                node[\"pos\"].extend((lat, lon))\n",
    "            else:\n",
    "                node[key] = element.attrib[key]\n",
    "\n",
    "        for child in element:\n",
    "            if child.tag == \"tag\":\n",
    "                if problemchars.search(child.attrib[\"k\"]):\n",
    "                    continue\n",
    "                elif child.attrib[\"k\"].startswith(\"tiger:\"):\n",
    "                    tiger_attribute = child.attrib[\"k\"].replace(\"tiger:\", \"\")\n",
    "                    node[\"tiger\"][tiger_attribute] = child.attrib[\"v\"]\n",
    "                elif child.attrib[\"k\"].startswith(\"gnis:\"):\n",
    "                    gnis_attribute = child.attrib[\"k\"].replace(\"gnis:\", \"\")\n",
    "                    node[\"gnis\"][gnis_attribute] = child.attrib[\"v\"]\n",
    "#                 elif child.attrib[\"k\"].startswith(\"source:\"):\n",
    "#                     source_attribute = child.attrib[\"k\"].replace(\"source:\", \"\")\n",
    "#                     if lower_colon.search(source_attribute):\n",
    "#                         if source_attribute.startswith(\"oneway:\"):\n",
    "#                             ow_attribute = source_attribute.replace(\"oneway:\", \"\")\n",
    "#                             node[\"source\"][\"oneway\"][ow_attribute] = child.attrib[\"v\"]\n",
    "#                         elif source_attribute.startswith(\"hgv:\"):\n",
    "#                             hgv_attribute = source_attribute.replace(\"hgv:\", \"\")\n",
    "#                             node[\"source\"][\"hgv\"][hgv_attribute] = child.attrib[\"v\"]\n",
    "#                     print source_attribute\n",
    "#                     print list(child.attrib[\"v\"])\n",
    "#                     node[\"source\"][source_attribute] = child.attrib[\"v\"]\n",
    "                elif child.attrib[\"k\"].startswith(\"addr:\"):\n",
    "                    addr_attribute = child.attrib[\"k\"].replace(\"addr:\", \"\")\n",
    "                    if not lower_colon.search(addr_attribute):\n",
    "                        if addr_attribute == \"full\":\n",
    "                            continue\n",
    "                        elif addr_attribute == \"street\":\n",
    "                            clean_name = update_name(child.attrib[\"v\"], MAPPING)\n",
    "                            clean_name = update_name(clean_name, MAPPING_DIRECTION)\n",
    "                            node[\"address\"][addr_attribute] = clean_name\n",
    "#                             print node[\"address\"]\n",
    "                        elif addr_attribute == \"city\":\n",
    "                            city = re.sub(r\", Florida\", \"\", child.attrib['v'])\n",
    "                            city = re.sub(r\", FL\", \"\", city)\n",
    "                            node[\"address\"][addr_attribute] = city.title()\n",
    "                        elif addr_attribute == \"state\":\n",
    "                            node[\"address\"][addr_attribute] = \"FL\"\n",
    "                        elif addr_attribute == \"housenumber\":\n",
    "                            node[\"address\"][addr_attribute] = re.sub(r\"\\W\", \"\", child.attrib['v'])\n",
    "                        elif addr_attribute == \"postalcode\":\n",
    "                            node[\"address\"][addr_attribute] = re.sub(r\"\\D\", \"\", child.attrib['v'])\n",
    "                        else:\n",
    "                            node[\"address\"][addr_attribute] = child.attrib[\"v\"]\n",
    "#                             print node\n",
    "#                     print node[\"tiger\"]\n",
    "                elif child.attrib[\"k\"] == \"url\":\n",
    "                    if not child.attrib[\"k\"].find(\"http://\"):\n",
    "                        node[child.attrib[\"k\"]] = \"http://\" + child.attrib[\"v\"]\n",
    "                elif child.attrib[\"k\"] == \"phone\":\n",
    "                    if child.attrib[\"v\"]:\n",
    "                        clean_phone = ''.join(i for i in child.attrib[\"v\"] if i.isdigit())[-10:]\n",
    "                        clean_phone = phonenumbers.parse(clean_phone, \"US\")\n",
    "                        node[child.attrib[\"k\"]] = phonenumbers.format_number(clean_phone, phonenumbers.PhoneNumberFormat.NATIONAL)\n",
    "\n",
    "                else: \n",
    "                    node[child.attrib[\"k\"]] = child.attrib[\"v\"].lower().replace(\" \", \"_\")\n",
    "            elif child.tag == \"nd\":\n",
    "                node[\"node_refs\"].append(child.attrib[\"ref\"])\n",
    "            else:\n",
    "                print child.tag, child.attrib\n",
    "\n",
    "        if not bool(node[\"tiger\"]):\n",
    "            node.pop(\"tiger\", None)\n",
    "        if not bool(node[\"gnis\"]):\n",
    "            node.pop(\"gnis\", None)\n",
    "        if not bool(node[\"source\"]):\n",
    "            node.pop(\"source\", None)\n",
    "        if not bool(node[\"address\"]):\n",
    "            node.pop(\"address\", None)\n",
    "        if not bool(node[\"node_refs\"]):\n",
    "            node.pop(\"node_refs\", None)\n",
    "\n",
    "        \n",
    "#         print node\n",
    "        return node\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "\n",
    "def process_map(file_in, pretty=False):\n",
    "    # You do not need to change this file\n",
    "    file_out = \"{0}.json\".format(file_in)\n",
    "    data = []\n",
    "    with codecs.open(file_out, \"w\") as fo:\n",
    "        for _, element in ET.iterparse(file_in):\n",
    "            el = shape_element(element)\n",
    "            if el:\n",
    "                data.append(el)\n",
    "                if pretty:\n",
    "                    fo.write(json.dumps(el, indent=2)+\"\\n\")\n",
    "                else:\n",
    "                    fo.write(json.dumps(el) + \"\\n\")\n",
    "    return data\n",
    "\n",
    "\n",
    "def test():\n",
    "    # NOTE: if you are running this code on your computer, with a larger dataset,\n",
    "    # call the process_map procedure with pretty=False. The pretty=True option adds\n",
    "    # additional spaces to the output, making it significantly larger.\n",
    "    osmfile = \"/Users/jpowell/Downloads/data/miami_florida.osm\"\n",
    "    data = process_map(osmfile, False)\n",
    "#     pprint.pprint(data)\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    test()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "generate_sample.py\n",
    "\"\"\"\n",
    "import xml.etree.ElementTree as ET  # Use cElementTree or lxml if too slow\n",
    "\n",
    "OSM_FILE = \"/Users/jpowell/Downloads/data/miami_florida.osm\"\n",
    "SAMPLE_FILE = \"/Users/jpowell/Downloads/data/miami_florida_sample.osm\"\n",
    "\n",
    "\n",
    "def get_element(osm_file, tags=('node', 'way', 'relation')):\n",
    "    \"\"\"Yield element if it is the right type of tag\n",
    "\n",
    "    Reference:\n",
    "    http://stackoverflow.com/questions/3095434/inserting-newlines-in-xml-file-generated-via-xml-etree-elementtree-in-python\n",
    "    \"\"\"\n",
    "    context = ET.iterparse(osm_file, events=('start', 'end'))\n",
    "    _, root = next(context)\n",
    "    for event, elem in context:\n",
    "        if event == 'end' and elem.tag in tags:\n",
    "            yield elem\n",
    "            root.clear()\n",
    "\n",
    "\n",
    "with open(SAMPLE_FILE, 'wb') as output:\n",
    "    output.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n')\n",
    "    output.write('<osm>\\n  ')\n",
    "\n",
    "    # Write every 20th top level element\n",
    "    for i, element in enumerate(get_element(OSM_FILE)):\n",
    "        if i % 20 == 0:\n",
    "            output.write(ET.tostring(element, encoding='utf-8'))\n",
    "\n",
    "    output.write('</osm>')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{u'_id': None, u'count': 1714558},\n",
      " {u'_id': u'(561) 208-5900', u'count': 4},\n",
      " {u'_id': u'(305) 591-6621', u'count': 4},\n",
      " {u'_id': u'(877) 762-3477', u'count': 2},\n",
      " {u'_id': u'(305) 871-4221', u'count': 2},\n",
      " {u'_id': u'(305) 233-3150', u'count': 2},\n",
      " {u'_id': u'(561) 212-4453', u'count': 2},\n",
      " {u'_id': u'(305) 826-8266', u'count': 2},\n",
      " {u'_id': u'(888) 412-9779', u'count': 2},\n",
      " {u'_id': u'(305) 673-5774', u'count': 2},\n",
      " {u'_id': u'(954) 565-5790', u'count': 2},\n",
      " {u'_id': u'(305) 866-7033', u'count': 2},\n",
      " {u'_id': u'(305) 865-9555', u'count': 2},\n",
      " {u'_id': u'(786) 332-2634', u'count': 2},\n",
      " {u'_id': u'(305) 538-4361', u'count': 1},\n",
      " {u'_id': u'(305) 532-2362', u'count': 1},\n",
      " {u'_id': u'(305) 534-6820', u'count': 1},\n",
      " {u'_id': u'(305) 531-5571', u'count': 1},\n",
      " {u'_id': u'(786) 485-2200', u'count': 1},\n",
      " {u'_id': u'(305) 673-0088', u'count': 1},\n",
      " {u'_id': u'(305) 674-8855', u'count': 1},\n",
      " {u'_id': u'(786) 439-1600', u'count': 1},\n",
      " {u'_id': u'(877) 220-2816', u'count': 1},\n",
      " {u'_id': u'(305) 673-3373', u'count': 1},\n",
      " {u'_id': u'(786) 476-2645', u'count': 1},\n",
      " {u'_id': u'(305) 532-7093', u'count': 1},\n",
      " {u'_id': u'(305) 531-5197', u'count': 1},\n",
      " {u'_id': u'(305) 672-7003', u'count': 1},\n",
      " {u'_id': u'(305) 532-0376', u'count': 1},\n",
      " {u'_id': u'(305) 674-8200', u'count': 1},\n",
      " {u'_id': u'(305) 538-0133', u'count': 1},\n",
      " {u'_id': u'(305) 674-0538', u'count': 1},\n",
      " {u'_id': u'(305) 938-1145', u'count': 1},\n",
      " {u'_id': u'(786) 541-2125', u'count': 1},\n",
      " {u'_id': u'(305) 672-0009', u'count': 1},\n",
      " {u'_id': u'(305) 534-4069', u'count': 1},\n",
      " {u'_id': u'(305) 674-8821', u'count': 1},\n",
      " {u'_id': u'(801) 240-2205', u'count': 1},\n",
      " {u'_id': u'(561) 582-9713', u'count': 1},\n",
      " {u'_id': u'(561) 793-1115', u'count': 1},\n",
      " {u'_id': u'(561) 684-3015', u'count': 1},\n",
      " {u'_id': u'(561) 683-6909', u'count': 1},\n",
      " {u'_id': u'(561) 721-9333', u'count': 1},\n",
      " {u'_id': u'(561) 640-5570', u'count': 1},\n",
      " {u'_id': u'(305) 571-9700', u'count': 1},\n",
      " {u'_id': u'(305) 952-2000', u'count': 1},\n",
      " {u'_id': u'(305) 674-8666', u'count': 1},\n",
      " {u'_id': u'(305) 534-0290', u'count': 1},\n",
      " {u'_id': u'(305) 443-1515', u'count': 1},\n",
      " {u'_id': u'(305) 443-0500', u'count': 1},\n",
      " {u'_id': u'(954) 355-4400', u'count': 1},\n",
      " {u'_id': u'(954) 454-5841', u'count': 1},\n",
      " {u'_id': u'(954) 921-6500', u'count': 1},\n",
      " {u'_id': u'(954) 923-4810', u'count': 1},\n",
      " {u'_id': u'(561) 478-0783', u'count': 1},\n",
      " {u'_id': u'(305) 868-0010', u'count': 1},\n",
      " {u'_id': u'(561) 616-0105', u'count': 1},\n",
      " {u'_id': u'(561) 499-3559', u'count': 1},\n",
      " {u'_id': u'(954) 922-0011', u'count': 1},\n",
      " {u'_id': u'(305) 969-6240', u'count': 1},\n",
      " {u'_id': u'(954) 343-1322', u'count': 1},\n",
      " {u'_id': u'(305) 531-6795', u'count': 1},\n",
      " {u'_id': u'(305) 960-2969', u'count': 1},\n",
      " {u'_id': u'(561) 368-1560', u'count': 1},\n",
      " {u'_id': u'(561) 624-6952', u'count': 1},\n",
      " {u'_id': u'(855) 305-2628', u'count': 1},\n",
      " {u'_id': u'(561) 844-2601', u'count': 1},\n",
      " {u'_id': u'(305) 695-7777', u'count': 1},\n",
      " {u'_id': u'(305) 579-6215', u'count': 1},\n",
      " {u'_id': u'(305) 507-3660', u'count': 1},\n",
      " {u'_id': u'(305) 573-6090', u'count': 1},\n",
      " {u'_id': u'(305) 290-4820', u'count': 1},\n",
      " {u'_id': u'(305) 266-0713', u'count': 1},\n",
      " {u'_id': u'(305) 230-0362', u'count': 1},\n",
      " {u'_id': u'(561) 826-8073', u'count': 1},\n",
      " {u'_id': u'(305) 264-1203', u'count': 1},\n",
      " {u'_id': u'(305) 576-8570', u'count': 1},\n",
      " {u'_id': u'(305) 779-8700', u'count': 1},\n",
      " {u'_id': u'(954) 987-5000', u'count': 1},\n",
      " {u'_id': u'(305) 604-1776', u'count': 1},\n",
      " {u'_id': u'(954) 923-3268', u'count': 1},\n",
      " {u'_id': u'(954) 565-1893', u'count': 1},\n",
      " {u'_id': u'(561) 683-4121', u'count': 1},\n",
      " {u'_id': u'(954) 457-8557', u'count': 1},\n",
      " {u'_id': u'(305) 571-9970', u'count': 1},\n",
      " {u'_id': u'(561) 615-2301', u'count': 1},\n",
      " {u'_id': u'(786) 768-2423', u'count': 1},\n",
      " {u'_id': u'(786) 624-5363', u'count': 1},\n",
      " {u'_id': u'(305) 748-2828', u'count': 1},\n",
      " {u'_id': u'(305) 348-1183', u'count': 1},\n",
      " {u'_id': u'(305) 220-1441', u'count': 1},\n",
      " {u'_id': u'(305) 235-6754', u'count': 1},\n",
      " {u'_id': u'(305) 949-4110', u'count': 1},\n",
      " {u'_id': u'(561) 482-3300', u'count': 1},\n",
      " {u'_id': u'(954) 723-0300', u'count': 1},\n",
      " {u'_id': u'(954) 703-6804', u'count': 1},\n",
      " {u'_id': u'(305) 935-5578', u'count': 1},\n",
      " {u'_id': u'(305) 668-6260', u'count': 1},\n",
      " {u'_id': u'(305) 932-2100', u'count': 1},\n",
      " {u'_id': u'(561) 662-4187', u'count': 1},\n",
      " {u'_id': u'(954) 561-4658', u'count': 1},\n",
      " {u'_id': u'(877) 591-5127', u'count': 1},\n",
      " {u'_id': u'(305) 333-8507', u'count': 1},\n",
      " {u'_id': u'(305) 866-0759', u'count': 1},\n",
      " {u'_id': u'(305) 674-0305', u'count': 1},\n",
      " {u'_id': u'(305) 864-2422', u'count': 1},\n",
      " {u'_id': u'(888) 805-8521', u'count': 1},\n",
      " {u'_id': u'(305) 455-3270', u'count': 1},\n",
      " {u'_id': u'(561) 969-6600', u'count': 1},\n",
      " {u'_id': u'(305) 945-4712', u'count': 1},\n",
      " {u'_id': u'(800) 327-5476', u'count': 1},\n",
      " {u'_id': u'(954) 973-1126', u'count': 1},\n",
      " {u'_id': u'(305) 248-4202', u'count': 1},\n",
      " {u'_id': u'(954) 731-1218', u'count': 1},\n",
      " {u'_id': u'(954) 943-2902', u'count': 1},\n",
      " {u'_id': u'(305) 531-3238', u'count': 1},\n",
      " {u'_id': u'(305) 238-2922', u'count': 1},\n",
      " {u'_id': u'(305) 668-6472', u'count': 1},\n",
      " {u'_id': u'185555', u'count': 1},\n",
      " {u'_id': u'(954) 431-2066', u'count': 1},\n",
      " {u'_id': u'(800) 900-9617', u'count': 1},\n",
      " {u'_id': u'(954) 735-7575', u'count': 1},\n",
      " {u'_id': u'(305) 247-1553', u'count': 1},\n",
      " {u'_id': u'(561) 965-3381', u'count': 1},\n",
      " {u'_id': u'(561) 793-2800', u'count': 1},\n",
      " {u'_id': u'(305) 444-7501', u'count': 1},\n",
      " {u'_id': u'(305) 532-0043', u'count': 1},\n",
      " {u'_id': u'(954) 472-1080', u'count': 1},\n",
      " {u'_id': u'(561) 852-8800', u'count': 1},\n",
      " {u'_id': u'(305) 270-0359', u'count': 1},\n",
      " {u'_id': u'(954) 797-4653', u'count': 1},\n",
      " {u'_id': u'(954) 454-0601', u'count': 1},\n",
      " {u'_id': u'(305) 531-5511', u'count': 1},\n",
      " {u'_id': u'(561) 487-5300', u'count': 1},\n",
      " {u'_id': u'(305) 460-5367', u'count': 1},\n",
      " {u'_id': u'(800) 721-2066', u'count': 1},\n",
      " {u'_id': u'(954) 763-6601', u'count': 1},\n",
      " {u'_id': u'(305) 593-1777', u'count': 1},\n",
      " {u'_id': u'(954) 485-0090', u'count': 1},\n",
      " {u'_id': u'(305) 933-3647', u'count': 1},\n",
      " {u'_id': u'(561) 848-1188', u'count': 1},\n",
      " {u'_id': u'(954) 486-1040', u'count': 1},\n",
      " {u'_id': u'(305) 821-7032', u'count': 1},\n",
      " {u'_id': u'(305) 261-2214', u'count': 1},\n",
      " {u'_id': u'(954) 733-7550', u'count': 1},\n",
      " {u'_id': u'(954) 485-6144', u'count': 1},\n",
      " {u'_id': u'(954) 485-2115', u'count': 1},\n",
      " {u'_id': u'(954) 760-7999', u'count': 1},\n",
      " {u'_id': u'(954) 967-4653', u'count': 1},\n",
      " {u'_id': u'(561) 547-8860', u'count': 1},\n",
      " {u'_id': u'(305) 666-3824', u'count': 1},\n",
      " {u'_id': u'(305) 684-2311', u'count': 1},\n",
      " {u'_id': u'(954) 714-4966', u'count': 1},\n",
      " {u'_id': u'(954) 733-5252', u'count': 1},\n",
      " {u'_id': u'(954) 922-2295', u'count': 1},\n",
      " {u'_id': u'(954) 735-4628', u'count': 1},\n",
      " {u'_id': u'(305) 532-3350', u'count': 1},\n",
      " {u'_id': u'(305) 854-2070', u'count': 1},\n",
      " {u'_id': u'(786) 777-1000', u'count': 1},\n",
      " {u'_id': u'(954) 564-9606', u'count': 1},\n",
      " {u'_id': u'(305) 221-2123', u'count': 1},\n",
      " {u'_id': u'(305) 604-1999', u'count': 1},\n",
      " {u'_id': u'(305) 606-6816', u'count': 1},\n",
      " {u'_id': u'(305) 964-7363', u'count': 1},\n",
      " {u'_id': u'(305) 604-5700', u'count': 1},\n",
      " {u'_id': u'(305) 604-5068', u'count': 1},\n",
      " {u'_id': u'305443672', u'count': 1},\n",
      " {u'_id': u'(305) 438-0488', u'count': 1},\n",
      " {u'_id': u'(954) 491-7666', u'count': 1},\n",
      " {u'_id': u'(305) 573-1480', u'count': 1},\n",
      " {u'_id': u'(305) 665-0636', u'count': 1},\n",
      " {u'_id': u'(305) 507-8008', u'count': 1},\n",
      " {u'_id': u'(561) 688-9033', u'count': 1},\n",
      " {u'_id': u'(305) 305-8429', u'count': 1},\n",
      " {u'_id': u'(305) 673-4422', u'count': 1},\n",
      " {u'_id': u'(800) 372-0627', u'count': 1},\n",
      " {u'_id': u'(305) 285-7112', u'count': 1},\n",
      " {u'_id': u'(561) 478-8852', u'count': 1},\n",
      " {u'_id': u'(561) 798-7405', u'count': 1},\n",
      " {u'_id': u'(305) 553-8383', u'count': 1},\n",
      " {u'_id': u'(561) 432-4966', u'count': 1},\n",
      " {u'_id': u'(954) 463-2500', u'count': 1},\n",
      " {u'_id': u'(305) 284-3233', u'count': 1},\n",
      " {u'_id': u'(561) 798-7110', u'count': 1},\n",
      " {u'_id': u'(954) 920-4549', u'count': 1},\n",
      " {u'_id': u'(305) 579-5998', u'count': 1},\n",
      " {u'_id': u'(305) 674-1160', u'count': 1},\n",
      " {u'_id': u'(561) 272-5127', u'count': 1},\n",
      " {u'_id': u'(305) 674-1226', u'count': 1},\n",
      " {u'_id': u'(561) 362-6408', u'count': 1},\n",
      " {u'_id': u'(954) 889-7738', u'count': 1},\n",
      " {u'_id': u'(954) 921-7781', u'count': 1},\n",
      " {u'_id': u'(954) 443-3003', u'count': 1},\n",
      " {u'_id': u'(800) 734-4667', u'count': 1},\n",
      " {u'_id': u'(305) 538-9990', u'count': 1},\n",
      " {u'_id': u'(305) 867-1013', u'count': 1},\n",
      " {u'_id': u'(954) 454-1001', u'count': 1},\n",
      " {u'_id': u'(305) 375-1492', u'count': 1},\n",
      " {u'_id': u'(954) 442-6553', u'count': 1},\n",
      " {u'_id': u'(954) 566-7950', u'count': 1},\n",
      " {u'_id': u'(877) 301-5478', u'count': 1},\n",
      " {u'_id': u'(561) 503-4887', u'count': 1},\n",
      " {u'_id': u'(954) 441-0168', u'count': 1},\n",
      " {u'_id': u'(305) 940-0927', u'count': 1},\n",
      " {u'_id': u'(954) 889-7734', u'count': 1},\n",
      " {u'_id': u'(954) 455-3597', u'count': 1},\n",
      " {u'_id': u'(888) 361-8511', u'count': 1},\n",
      " {u'_id': u'(305) 822-7360', u'count': 1},\n",
      " {u'_id': u'(561) 972-9000', u'count': 1},\n",
      " {u'_id': u'(305) 538-6397', u'count': 1},\n",
      " {u'_id': u'(561) 594-7336', u'count': 1},\n",
      " {u'_id': u'(305) 604-5951', u'count': 1},\n",
      " {u'_id': u'(305) 443-2113', u'count': 1},\n",
      " {u'_id': u'(561) 434-9098', u'count': 1},\n",
      " {u'_id': u'(954) 733-2228', u'count': 1},\n",
      " {u'_id': u'(954) 444-4237', u'count': 1},\n",
      " {u'_id': u'1800', u'count': 1},\n",
      " {u'_id': u'(561) 338-5031', u'count': 1},\n",
      " {u'_id': u'(954) 484-6909', u'count': 1},\n",
      " {u'_id': u'(954) 457-0045', u'count': 1},\n",
      " {u'_id': u'(305) 649-3491', u'count': 1},\n",
      " {u'_id': u'(954) 708-9137', u'count': 1},\n",
      " {u'_id': u'(561) 249-0249', u'count': 1},\n",
      " {u'_id': u'(561) 689-1830', u'count': 1},\n",
      " {u'_id': u'(305) 757-0662', u'count': 1},\n",
      " {u'_id': u'(954) 497-1630', u'count': 1},\n",
      " {u'_id': u'(561) 795-6663', u'count': 1},\n",
      " {u'_id': u'(954) 589-0292', u'count': 1},\n",
      " {u'_id': u'(305) 348-2668', u'count': 1},\n",
      " {u'_id': u'(561) 795-4333', u'count': 1},\n",
      " {u'_id': u'305348282', u'count': 1},\n",
      " {u'_id': u'(800) 863-2819', u'count': 1},\n",
      " {u'_id': u'(305) 751-7402', u'count': 1},\n",
      " {u'_id': u'(305) 396-8731', u'count': 1},\n",
      " {u'_id': u'(954) 414-2222', u'count': 1},\n",
      " {u'_id': u'(954) 347-9566', u'count': 1},\n",
      " {u'_id': u'(954) 748-6378', u'count': 1},\n",
      " {u'_id': u'(954) 652-1058', u'count': 1},\n",
      " {u'_id': u'(954) 971-7626', u'count': 1},\n",
      " {u'_id': u'(561) 686-4300', u'count': 1},\n",
      " {u'_id': u'(305) 471-9394', u'count': 1},\n",
      " {u'_id': u'(305) 592-3300', u'count': 1},\n",
      " {u'_id': u'(305) 532-4000', u'count': 1},\n",
      " {u'_id': u'(561) 659-4020', u'count': 1},\n",
      " {u'_id': u'(954) 463-7588', u'count': 1},\n",
      " {u'_id': u'(305) 456-9548', u'count': 1},\n",
      " {u'_id': u'(855) 448-8726', u'count': 1},\n",
      " {u'_id': u'(305) 448-5225', u'count': 1},\n",
      " {u'_id': u'(954) 522-7100', u'count': 1},\n",
      " {u'_id': u'(305) 538-8066', u'count': 1},\n",
      " {u'_id': u'(561) 495-1144', u'count': 1},\n",
      " {u'_id': u'(941) 523-9441', u'count': 1},\n",
      " {u'_id': u'(561) 330-0663', u'count': 1},\n",
      " {u'_id': u'(305) 228-1888', u'count': 1},\n",
      " {u'_id': u'(954) 972-8140', u'count': 1},\n",
      " {u'_id': u'(305) 538-1611', u'count': 1},\n",
      " {u'_id': u'(305) 921-0440', u'count': 1},\n",
      " {u'_id': u'(561) 671-4620', u'count': 1},\n",
      " {u'_id': u'(877) 637-0450', u'count': 1},\n",
      " {u'_id': u'(954) 724-7115', u'count': 1},\n",
      " {u'_id': u'(888) 909-9950', u'count': 1},\n",
      " {u'_id': u'(954) 920-9696', u'count': 1},\n",
      " {u'_id': u'(954) 531-0425', u'count': 1},\n",
      " {u'_id': u'(305) 828-8950', u'count': 1},\n",
      " {u'_id': u'(954) 975-7977', u'count': 1},\n",
      " {u'_id': u'(305) 226-4722', u'count': 1},\n",
      " {u'_id': u'(561) 526-3331', u'count': 1},\n",
      " {u'_id': u'(305) 531-3341', u'count': 1},\n",
      " {u'_id': u'(561) 622-1000', u'count': 1},\n",
      " {u'_id': u'(561) 495-5300', u'count': 1},\n",
      " {u'_id': u'(305) 573-4199', u'count': 1},\n",
      " {u'_id': u'(786) 409-3100', u'count': 1},\n",
      " {u'_id': u'(954) 938-9100', u'count': 1},\n",
      " {u'_id': u'(800) 999-3355', u'count': 1},\n",
      " {u'_id': u'(561) 964-5700', u'count': 1},\n",
      " {u'_id': u'(800) 622-9000', u'count': 1},\n",
      " {u'_id': u'(954) 975-0072', u'count': 1},\n",
      " {u'_id': u'(561) 439-4721', u'count': 1},\n",
      " {u'_id': u'(305) 640-5270', u'count': 1},\n",
      " {u'_id': u'(561) 929-4393', u'count': 1},\n",
      " {u'_id': u'(954) 981-6123', u'count': 1},\n",
      " {u'_id': u'(305) 603-1003', u'count': 1},\n",
      " {u'_id': u'(305) 665-7477', u'count': 1},\n",
      " {u'_id': u'(866) 907-5777', u'count': 1},\n",
      " {u'_id': u'(305) 867-0106', u'count': 1},\n",
      " {u'_id': u'(305) 535-6500', u'count': 1},\n",
      " {u'_id': u'(305) 576-4350', u'count': 1},\n",
      " {u'_id': u'(305) 685-5264', u'count': 1},\n",
      " {u'_id': u'(954) 653-0047', u'count': 1},\n",
      " {u'_id': u'(786) 347-7100', u'count': 1},\n",
      " {u'_id': u'(305) 247-8503', u'count': 1},\n",
      " {u'_id': u'(305) 234-2577', u'count': 1},\n",
      " {u'_id': u'(954) 570-8114', u'count': 1},\n",
      " {u'_id': u'(561) 627-6358', u'count': 1},\n",
      " {u'_id': u'(305) 456-3571', u'count': 1},\n",
      " {u'_id': u'(954) 217-8787', u'count': 1},\n",
      " {u'_id': u'(305) 763-8665', u'count': 1},\n",
      " {u'_id': u'(305) 534-2161', u'count': 1},\n",
      " {u'_id': u'(305) 517-1770', u'count': 1},\n",
      " {u'_id': u'(305) 255-5777', u'count': 1},\n",
      " {u'_id': u'(561) 847-2346', u'count': 1},\n",
      " {u'_id': u'(305) 258-3500', u'count': 1},\n",
      " {u'_id': u'(305) 960-7022', u'count': 1},\n",
      " {u'_id': u'(954) 609-2542', u'count': 1},\n",
      " {u'_id': u'(954) 731-5841', u'count': 1},\n",
      " {u'_id': u'(954) 593-5534', u'count': 1},\n",
      " {u'_id': u'(561) 721-3888', u'count': 1},\n",
      " {u'_id': u'(305) 237-3135', u'count': 1},\n",
      " {u'_id': u'(305) 267-1356', u'count': 1},\n",
      " {u'_id': u'(305) 559-3616', u'count': 1},\n",
      " {u'_id': u'(561) 795-9299', u'count': 1},\n",
      " {u'_id': u'(305) 667-3697', u'count': 1},\n",
      " {u'_id': u'(786) 558-0220', u'count': 1},\n",
      " {u'_id': u'(305) 756-0366', u'count': 1},\n",
      " {u'_id': u'(561) 328-6429', u'count': 1},\n",
      " {u'_id': u'(305) 576-4500', u'count': 1},\n",
      " {u'_id': u'(954) 922-1600', u'count': 1},\n",
      " {u'_id': u'(305) 531-5831', u'count': 1},\n",
      " {u'_id': u'(305) 448-2600', u'count': 1},\n",
      " {u'_id': u'(954) 668-1811', u'count': 1},\n",
      " {u'_id': u'(954) 572-2270', u'count': 1},\n",
      " {u'_id': u'(954) 763-2777', u'count': 1},\n",
      " {u'_id': u'(561) 547-7656', u'count': 1},\n",
      " {u'_id': u'(925) 352-9393', u'count': 1},\n",
      " {u'_id': u'(305) 398-7000', u'count': 1},\n",
      " {u'_id': u'(954) 925-3755', u'count': 1},\n",
      " {u'_id': u'(305) 534-6300', u'count': 1},\n",
      " {u'_id': u'(954) 564-9601', u'count': 1},\n",
      " {u'_id': u'(305) 935-4295', u'count': 1},\n",
      " {u'_id': u'(954) 485-1911', u'count': 1},\n",
      " {u'_id': u'(305) 531-0101', u'count': 1},\n",
      " {u'_id': u'(305) 576-1135', u'count': 1},\n",
      " {u'_id': u'(954) 606-0936', u'count': 1},\n",
      " {u'_id': u'(561) 296-7621', u'count': 1},\n",
      " {u'_id': u'(561) 204-3012', u'count': 1},\n",
      " {u'_id': u'(305) 234-8800', u'count': 1},\n",
      " {u'_id': u'(305) 735-3521', u'count': 1},\n",
      " {u'_id': u'(954) 639-4770', u'count': 1},\n",
      " {u'_id': u'(305) 538-5220', u'count': 1},\n",
      " {u'_id': u'(305) 858-2500', u'count': 1},\n",
      " {u'_id': u'(305) 233-4561', u'count': 1},\n",
      " {u'_id': u'(305) 261-7071', u'count': 1},\n",
      " {u'_id': u'(954) 463-3000', u'count': 1},\n",
      " {u'_id': u'(561) 588-5208', u'count': 1},\n",
      " {u'_id': u'(954) 792-8181', u'count': 1},\n",
      " {u'_id': u'(305) 854-3836', u'count': 1},\n",
      " {u'_id': u'(305) 596-5973', u'count': 1},\n",
      " {u'_id': u'(305) 433-4600', u'count': 1},\n",
      " {u'_id': u'(954) 372-7026', u'count': 1},\n",
      " {u'_id': u'(561) 276-9334', u'count': 1},\n",
      " {u'_id': u'(305) 361-8487', u'count': 1},\n",
      " {u'_id': u'(877) 750-2628', u'count': 1},\n",
      " {u'_id': u'(305) 573-9994', u'count': 1},\n",
      " {u'_id': u'(954) 522-4491', u'count': 1},\n",
      " {u'_id': u'(305) 666-5979', u'count': 1},\n",
      " {u'_id': u'(305) 672-8881', u'count': 1},\n",
      " {u'_id': u'(305) 220-1121', u'count': 1},\n",
      " {u'_id': u'(954) 749-2995', u'count': 1},\n",
      " {u'_id': u'(305) 531-6421', u'count': 1},\n",
      " {u'_id': u'(954) 971-7170', u'count': 1},\n",
      " {u'_id': u'(786) 375-5576', u'count': 1},\n",
      " {u'_id': u'(305) 864-3669', u'count': 1},\n",
      " {u'_id': u'(561) 840-6868', u'count': 1},\n",
      " {u'_id': u'(954) 973-0700', u'count': 1},\n",
      " {u'_id': u'(561) 582-4422', u'count': 1},\n",
      " {u'_id': u'(786) 837-6115', u'count': 1},\n",
      " {u'_id': u'(561) 965-4166', u'count': 1},\n",
      " {u'_id': u'(305) 704-7879', u'count': 1},\n",
      " {u'_id': u'(305) 397-8305', u'count': 1},\n",
      " {u'_id': u'(954) 385-5678', u'count': 1},\n",
      " {u'_id': u'(305) 864-5252', u'count': 1},\n",
      " {u'_id': u'(800) 463-3339', u'count': 1},\n",
      " {u'_id': u'(561) 495-1516', u'count': 1},\n",
      " {u'_id': u'(561) 793-9980', u'count': 1},\n",
      " {u'_id': u'(305) 278-6945', u'count': 1},\n",
      " {u'_id': u'786564', u'count': 1},\n",
      " {u'_id': u'(561) 880-0110', u'count': 1},\n",
      " {u'_id': u'(305) 559-7114', u'count': 1},\n",
      " {u'_id': u'(561) 585-6104', u'count': 1},\n",
      " {u'_id': u'(305) 374-2444', u'count': 1},\n",
      " {u'_id': u'(305) 271-1808', u'count': 1},\n",
      " {u'_id': u'(305) 262-6070', u'count': 1},\n",
      " {u'_id': u'(305) 261-4230', u'count': 1},\n",
      " {u'_id': u'(305) 763-8844', u'count': 1},\n",
      " {u'_id': u'(786) 517-6200', u'count': 1},\n",
      " {u'_id': u'(305) 284-6666', u'count': 1},\n",
      " {u'_id': u'(561) 588-4488', u'count': 1},\n",
      " {u'_id': u'(954) 752-0333', u'count': 1},\n",
      " {u'_id': u'(305) 665-0000', u'count': 1},\n",
      " {u'_id': u'(561) 932-0050', u'count': 1},\n",
      " {u'_id': u'(561) 845-8800', u'count': 1},\n",
      " {u'_id': u'(561) 408-9800', u'count': 1},\n",
      " {u'_id': u'(305) 672-2579', u'count': 1},\n",
      " {u'_id': u'(954) 302-8610', u'count': 1},\n",
      " {u'_id': u'(954) 917-1002', u'count': 1},\n",
      " {u'_id': u'(305) 245-0311', u'count': 1},\n",
      " {u'_id': u'(305) 284-4351', u'count': 1},\n",
      " {u'_id': u'(786) 863-1661', u'count': 1},\n",
      " {u'_id': u'(305) 529-9954', u'count': 1},\n",
      " {u'_id': u'(305) 336-0457', u'count': 1},\n",
      " {u'_id': u'(888) 238-0167', u'count': 1},\n",
      " {u'_id': u'(561) 582-4468', u'count': 1},\n",
      " {u'_id': u'(954) 648-4868', u'count': 1},\n",
      " {u'_id': u'(800) 615-3107', u'count': 1},\n",
      " {u'_id': u'(305) 227-9113', u'count': 1},\n",
      " {u'_id': u'786505', u'count': 1},\n",
      " {u'_id': u'(561) 585-1885', u'count': 1},\n",
      " {u'_id': u'(305) 598-7877', u'count': 1},\n",
      " {u'_id': u'(888) 237-7015', u'count': 1},\n",
      " {u'_id': u'(305) 642-7656', u'count': 1},\n",
      " {u'_id': u'(305) 397-8628', u'count': 1},\n",
      " {u'_id': u'(305) 361-5421', u'count': 1},\n",
      " {u'_id': u'(954) 977-8011', u'count': 1},\n",
      " {u'_id': u'(305) 361-0080', u'count': 1},\n",
      " {u'_id': u'(305) 445-3557', u'count': 1},\n",
      " {u'_id': u'(954) 854-6904', u'count': 1},\n",
      " {u'_id': u'(800) 551-7217', u'count': 1},\n",
      " {u'_id': u'(305) 532-8934', u'count': 1},\n",
      " {u'_id': u'(786) 408-5050', u'count': 1},\n",
      " {u'_id': u'(305) 460-5364', u'count': 1},\n",
      " {u'_id': u'(954) 454-0989', u'count': 1},\n",
      " {u'_id': u'(561) 833-2886', u'count': 1},\n",
      " {u'_id': u'(786) 361-4622', u'count': 1},\n",
      " {u'_id': u'(561) 659-0900', u'count': 1},\n",
      " {u'_id': u'(954) 526-9386', u'count': 1},\n",
      " {u'_id': u'(954) 389-2100', u'count': 1},\n",
      " {u'_id': u'(561) 478-3574', u'count': 1},\n",
      " {u'_id': u'(305) 532-4006', u'count': 1},\n",
      " {u'_id': u'(305) 861-1869', u'count': 1},\n",
      " {u'_id': u'(954) 472-5000', u'count': 1},\n",
      " {u'_id': u'(305) 248-9777', u'count': 1},\n",
      " {u'_id': u'(804) 815-5054', u'count': 1},\n",
      " {u'_id': u'(305) 362-3300', u'count': 1},\n",
      " {u'_id': u'(561) 684-9400', u'count': 1},\n",
      " {u'_id': u'(954) 455-4700', u'count': 1},\n",
      " {u'_id': u'(888) 552-6816', u'count': 1},\n",
      " {u'_id': u'(786) 382-5161', u'count': 1},\n",
      " {u'_id': u'(305) 358-1234', u'count': 1},\n",
      " {u'_id': u'(305) 673-0400', u'count': 1},\n",
      " {u'_id': u'(305) 248-4009', u'count': 1},\n",
      " {u'_id': u'(305) 819-2600', u'count': 1},\n",
      " {u'_id': u'(305) 262-7351', u'count': 1},\n",
      " {u'_id': u'(561) 282-2225', u'count': 1},\n",
      " {u'_id': u'(954) 735-1328', u'count': 1},\n",
      " {u'_id': u'(305) 663-8899', u'count': 1},\n",
      " {u'_id': u'(561) 471-8876', u'count': 1},\n",
      " {u'_id': u'(888) 749-8227', u'count': 1},\n",
      " {u'_id': u'(305) 538-7444', u'count': 1},\n",
      " {u'_id': u'(305) 672-7747', u'count': 1},\n",
      " {u'_id': u'(561) 433-2898', u'count': 1},\n",
      " {u'_id': u'(954) 561-9211', u'count': 1},\n",
      " {u'_id': u'(305) 673-8443', u'count': 1},\n",
      " {u'_id': u'(305) 538-9908', u'count': 1},\n",
      " {u'_id': u'(954) 752-4500', u'count': 1},\n",
      " {u'_id': u'(954) 229-7970', u'count': 1},\n",
      " {u'_id': u'(305) 604-0049', u'count': 1},\n",
      " {u'_id': u'(954) 300-2229', u'count': 1}]\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "mongoDB.py\n",
    "\"\"\"\n",
    "\n",
    "# import os\n",
    "# print os.getcwd()\n",
    "\n",
    "import sys\n",
    "sys.path.append('/usr/local/lib/python2.7/site-packages')\n",
    "import pymongo\n",
    "\n",
    "def get_db(db_name):\n",
    "    from pymongo import MongoClient\n",
    "    client = MongoClient('localhost:27017')\n",
    "    db = client[db_name]\n",
    "\n",
    "    return db\n",
    "\n",
    "\n",
    "def make_pipeline():\n",
    "    # complete the aggregation pipeline\n",
    "    pipeline = [\n",
    "# users with only 1 post\n",
    "#         {\"$group\": {\"_id\": \"$created.user\", \"count\": {\"$sum\": 1}}},\n",
    "#         {\"$group\": {\"_id\": \"$count\", \"num_users\": {\"$sum\": 1}}},\n",
    "#         {\"$sort\": {\"_id\": 1}}, \n",
    "#         {\"$limit\": 1} \n",
    "# top contributors\n",
    "#         {\"$group\": {\"_id\": \"$created.user\", \"count\": {\"$sum\": 1}}},\n",
    "#         {\"$sort\": {\"count\": -1}}, \n",
    "#         {\"$limit\": 10} \n",
    "# top postal_codes by user\n",
    "#         {\"$match\": {\"address.postcode\": {\"$exists\":1}}},\n",
    "#         {\"$group\": {\"_id\": {\n",
    "#                         \"postcode\":\"$address.postcode\", \n",
    "#                         \"user\":\"$created.user\"\n",
    "#                     }, \n",
    "#                     \"postcode_count\": {\"$sum\": 1}}},\n",
    "#         {\"$sort\": {\"postcode_count\": -1}}, \n",
    "#         {\"$limit\": 10} \n",
    "# top city by user\n",
    "#         {\"$match\": {\"address.city\": {\"$exists\":1}}},\n",
    "#         {\"$group\": {\"_id\": {\n",
    "#                         \"city\":\"$address.city\", \n",
    "#                         \"user\":\"$created.user\"\n",
    "#                     }, \n",
    "#                     \"city_count\": {\"$sum\": 1}}},\n",
    "#         {\"$sort\": {\"city_count\": -1}}, \n",
    "#         {\"$limit\": 10} \n",
    "# top state by user\n",
    "#         {\"$match\": {\"address.state\": {\"$exists\":1}}},\n",
    "#         {\"$group\": {\"_id\": {\n",
    "#                         \"state\":\"$address.state\", \n",
    "#                         \"user\":\"$created.user\"\n",
    "#                     }, \n",
    "#                     \"state_count\": {\"$sum\": 1}}},\n",
    "#         {\"$sort\": {\"state_count\": -1}}, \n",
    "#         {\"$limit\": 10} \n",
    "# top waterway categories\n",
    "#         {\"$group\": {\"_id\": \"$waterway\", \"count\": {\"$sum\": 1}}},\n",
    "#         {\"$sort\": {\"count\": -1}}, \n",
    "#         {\"$limit\": 10} \n",
    "# top natural categories\n",
    "#         {\"$group\": {\"_id\": \"$natural\", \"count\": {\"$sum\": 1}}},\n",
    "#         {\"$sort\": {\"count\": -1}}, \n",
    "#         {\"$limit\": 10} \n",
    "# top leisure categories\n",
    "#         {\"$group\": {\"_id\": \"$leisure\", \"count\": {\"$sum\": 1}}},\n",
    "#         {\"$sort\": {\"count\": -1}}, \n",
    "#         {\"$limit\": 10} \n",
    "# top amenities\n",
    "#         {\"$group\": {\"_id\": \"$amenity\", \"count\": {\"$sum\": 1}}},\n",
    "#         {\"$sort\": {\"count\": -1}}, \n",
    "#         {\"$limit\": 10}   \n",
    "# biggest religion\n",
    "#         {\"$match\": {\"amenity\": {\"$exists\":1}, \"amenity\":\"place_of_worship\"}}, \n",
    "#         {\"$group\": {\"_id\": \"$religion\", \"count\": {\"$sum\": 1}}},\n",
    "#         {\"$sort\": {\"count\": -1}}, \n",
    "#         {\"$limit\": 10}         \n",
    "# popular cuisines\n",
    "#         {\"$match\": {\"amenity\": {\"$exists\":1}, \"amenity\":\"restaurant\"}}, \n",
    "#         {\"$group\": {\"_id\": \"$restaurant\", \"count\": {\"$sum\": 1}}},\n",
    "#         {\"$sort\": {\"count\": -1}}, \n",
    "#         {\"$limit\": 10}         \n",
    "# preview\n",
    "        {\"$group\": {\"_id\": \"$phone\", \"count\": {\"$sum\": 1}}},\n",
    "        {\"$sort\": {\"count\": -1}} \n",
    "#         {\"$limit\": 10} \n",
    "    ]\n",
    "    return pipeline\n",
    "\n",
    "def aggregate(db, pipeline):\n",
    "    return [doc for doc in db.master1.aggregate(pipeline)]\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    db = get_db('miami_osm')\n",
    "#     # of documents\n",
    "#     result = db.master1.find().count()\n",
    "#     # of nodes\n",
    "#     result = db.master1.find({\"type\":\"node\"}).count()\n",
    "#     # of ways\n",
    "#     result = db.master1.find({\"type\":\"way\"}).count()\n",
    "#     # of unique users\n",
    "#     result = len(db.master1.distinct(\"created.user\"))\n",
    "\n",
    "    pipeline = make_pipeline()\n",
    "    result = aggregate(db, pipeline)\n",
    "    \n",
    "    import pprint\n",
    "    pprint.pprint(result)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
